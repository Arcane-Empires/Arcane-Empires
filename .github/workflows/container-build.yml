name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - staging

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  FRONTEND_IMAGE_NAME: arcaneempire-frontend
  BACKEND_IMAGE_NAME: arcaneempire-backend

jobs:
  # Run tests.
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run backend tests
        run: |
          # Check if backend Dockerfile exists
          if [ -f Dockerfile ]; then
            docker build . --file Dockerfile
          else
            echo "Dockerfile not found!"
            exit 1
          fi

      - name: Run frontend tests
        run: |
          # Check if frontend Dockerfile exists
          if [ -f Dockerfile.frontend ]; then
            docker build . --file Dockerfile.frontend
          else
            echo "Dockerfile.frontend not found!"
            exit 1
          fi

  # Push images to registry
  push:
    # Ensure test job passes before pushing images.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build backend image
        run: docker build . --file Dockerfile --tag $BACKEND_IMAGE_NAME

      - name: Build frontend image
        run: docker build . --file Dockerfile.frontend --tag $FRONTEND_IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push backend image
        run: |
          BACKEND_IMAGE_ID=ghcr.io/${{ github.repository }}/$BACKEND_IMAGE_NAME
          
          # Change all uppercase to lowercase
          BACKEND_IMAGE_ID=$(echo $BACKEND_IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo BACKEND_IMAGE_ID=$BACKEND_IMAGE_ID
          echo VERSION=$VERSION
          docker tag $BACKEND_IMAGE_NAME $BACKEND_IMAGE_ID:$VERSION
          docker push $BACKEND_IMAGE_ID:$VERSION

      - name: Push frontend image
        run: |
          FRONTEND_IMAGE_ID=ghcr.io/${{ github.repository }}/$FRONTEND_IMAGE_NAME
          
          # Change all uppercase to lowercase
          FRONTEND_IMAGE_ID=$(echo $FRONTEND_IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo FRONTEND_IMAGE_ID=$FRONTEND_IMAGE_ID
          echo VERSION=$VERSION
          docker tag $FRONTEND_IMAGE_NAME $FRONTEND_IMAGE_ID:$VERSION
          docker push $FRONTEND_IMAGE_ID:$VERSION
